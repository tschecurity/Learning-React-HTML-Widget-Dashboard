# -*- coding: utf-8 -*-
"""React.js HTML Widget Dashboard edit

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HfNCjaCuxRruxPV6AxWdmLQf8xW8NduN
"""

# Install required libraries
!pip install -q scikit-learn pandas

import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import json

# Sample text snippets (1 = phishing, 0 = legitimate)
texts = [
    "CVS logs",
    "fill out w2",
    "Hurry click now",
    "report attachment",
    "site is down",
    "account created",
    "coporate survey, fill out for prizes",
    "dashboard view",
    "user account",
    "logs"
]
labels = [1, 1, 1, 1, 0, 0, 1, 0, 0, 0]

# Vectorize into bag-of-words features
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(texts)
y = pd.Series(labels)

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=42
)

# Fit the model
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# Predict probabilities and compute accuracy
proba = model.predict_proba(X_test)[:, 1]
acc = accuracy_score(y_test, model.predict(X_test))

# Prepare JSON payload for React
payload = {
    "labels": list(range(len(proba))),
    "probabilities": proba.tolist(),
    "accuracy": acc
}
payload_json = json.dumps(payload)

from IPython.display import HTML, display

html = f"""
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <!-- React & ReactDOM -->
    <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
    <!-- Babel for JSX -->
    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
    <!-- Chart.js & React-Chartjs-2 -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/react-chartjs-2@2.11.1/dist/react-chartjs-2.min.js"></script>
    <style>
      body {{ font-family: sans-serif; padding: 20px; }}
      #root {{ max-width: 700px; margin: auto; }}
    </style>
  </head>
  <body>
    <div id="root"></div>
    <script type="text/babel">
      const {{ Line }} = ReactChartjs2;

      function Dashboard({{ labels, probabilities, accuracy }}) {{
        const data = {{
          labels: labels,
          datasets: [{{
            label: 'Phishing Probability',
            data: probabilities,
            borderColor: 'rgba(255,99,132,1)',
            backgroundColor: 'rgba(255,99,132,0.2)',
            fill: true,
          }}]
        }};
        const options = {{
          scales: {{
            x: {{ title: {{ display: true, text: 'Sample Index' }} }},
            y: {{ title: {{ display: true, text: 'Probability' }} , min: 0, max: 1 }}
          }}
        }};

        return (
          <div>
            <h2>Phishing Detection Dashboard</h2>
            <p>Model Accuracy: <strong>{{accuracy.toFixed(2)}}</strong></p>
            <Line data={{data}} options={{options}} />
          </div>
        );
      }}

      const payload_json_string = '{payload_json}';
      const payload = JSON.parse(payload_json_string);


      ReactDOM.render(
        <Dashboard
          labels={{payload.labels}}
          probabilities={{payload.probabilities}}
          accuracy={{payload.accuracy}}
        />,
        document.getElementById('root')
      );
    </script>
  </body>
</html>
"""

display(HTML(html))

"""Note the above React HTML Widget dashboard did not display, troubleshooting with AI, suggested to: use Base64 data URI"""

from IPython.display import HTML
import base64

html = f"""
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <!-- React & ReactDOM -->
    <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
    <!-- Babel for JSX -->
    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
    <!-- Chart.js & React-Chartjs-2 -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/react-chartjs-2@2.11.1/dist/react-chartjs-2.min.js"></script>
    <style>
      body {{ font-family: sans-serif; padding: 20px; }}
      #root {{ max-width: 700px; margin: auto; }}
    </style>
  </head>
  <body>
    <div id="root"></div>
    <script type="text/babel">
      const {{ Line }} = ReactChartjs2;

      function Dashboard({{ labels, probabilities, accuracy }}) {{
        const data = {{
          labels: labels,
          datasets: [{{
            label: 'Phishing Probability',
            data: probabilities,
            borderColor: 'rgba(255,99,132,1)',
            backgroundColor: 'rgba(255,99,132,0.2)',
            fill: true,
          }}]
        }};
        const options = {{
          scales: {{
            x: {{ title: {{ display: true, text: 'Sample Index' }} }},
            y: {{ title: {{ display: true, text: 'Probability' }} , min: 0, max: 1 }}
          }}
        }};

        return (
          <div>
            <h2>Phishing Detection Dashboard</h2>
            <p>Model Accuracy: <strong>{{accuracy.toFixed(2)}}</strong></p>
            <Line data={{data}} options={{options}} />
          </div>
        );
      }}

      const payload_json_string = '{payload_json}';
      const payload = JSON.parse(payload_json_string);


      ReactDOM.render(
        <Dashboard
          labels={{payload.labels}}
          probabilities={{payload.probabilities}}
          accuracy={{payload.accuracy}}
        />,
        document.getElementById('root')
      );
    </script>
  </body>
</html>
"""

display(HTML(html))
b64 = base64.b64encode(html.encode('utf-8')).decode('utf-8')
iframe = f'''
<iframe
  src="data:text/html;base64,{b64}"
  width="800"
  height="600"
  style="border:none;"
></iframe>
'''
display(HTML(iframe))

"""How to modify look and feel of the React Widget"""

from IPython.display import HTML
import base64

html = f"""
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <!-- React & ReactDOM -->
    <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
    <!-- Babel for JSX -->
    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
    <!-- Chart.js & React-Chartjs-2 -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/react-chartjs-2@2.11.1/dist/react-chartjs-2.min.js"></script>
    <style>
      body {{ font-family: sans-serif; padding: 20px; }}
      #root {{ max-width: 700px; margin: auto; }}
    </style>
  </head>
  <body>
    <div id="root"></div>
    <script type="text/babel">
      const {{ Line }} = ReactChartjs2;

      function Dashboard({{ labels, probabilities, accuracy }}) {{
        const data = {{
          labels: labels,
          datasets: [{{
            label: 'Phishing Probability',
            data: probabilities,
            borderColor: 'rgba(255,99,132,1)',
            backgroundColor: 'rgba(30,30,30,.50)',
            fill: true,
          }}]
        }};
        const options = {{
          scales: {{
            x: {{ title: {{ display: true, text: 'Sample Index' }} }},
            y: {{ title: {{ display: true, text: 'Probability' }} , min: 0, max: 1 }}
          }}
        }};

        return (
          <div>
            <h2>Phishing Detection Dashboard</h2>
            <p>Model Accuracy: <strong>{{accuracy.toFixed(2)}}</strong></p>
            <Line data={{data}} options={{options}} />
          </div>
        );
      }}

      const payload_json_string = '{payload_json}';
      const payload = JSON.parse(payload_json_string);


      ReactDOM.render(
        <Dashboard
          labels={{payload.labels}}
          probabilities={{payload.probabilities}}
          accuracy={{payload.accuracy}}
        />,
        document.getElementById('root')
      );
    </script>
  </body>
</html>
"""

display(HTML(html))
b64 = base64.b64encode(html.encode('utf-8')).decode('utf-8')
iframe = f'''
<iframe
  src="data:text/html;base64,{b64}"
  width="800"
  height="600"
  style="border:none;"
></iframe>
'''
display(HTML(iframe))

"""The last value such as .02 or 0.5 is the weight of the opacity or how strong the color is."""
